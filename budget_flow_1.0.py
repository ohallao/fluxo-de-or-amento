# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CWLaZ1m2KZL8gRubGkJ55bOgmEo4-e5V
"""

import streamlit as st
import pandas as pd
import plotly.express as px

# Função para gerar dados de exemplo para cada mês
def gerar_dados_exemplo():
    meses = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 
             'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']
    dados = {mes: {
        "Receitas": 0.0, 
        "Despesas": 0.0, 
        "Investimentos": 0.0
        } for mes in meses}
    return dados

# Inicializar os dados no session_state se ainda não estiverem definidos
if 'dados_por_mes' not in st.session_state:
    st.session_state.dados_por_mes = gerar_dados_exemplo()

# Função para exibir o resumo de um mês
def exibir_resumo_mes(mes, dados_mes):
    st.markdown(f"### {mes} 2023")
    st.write(f"Receitas: R$ {dados_mes['Receitas']:.2f}")
    st.write(f"Despesas: R$ {dados_mes['Despesas']:.2f}")
    st.write(f"Investimentos: R$ {dados_mes['Investimentos']:.2f}")

# Função para calcular a distribuição em porcentagens
def calcular_percentuais(dados_mes):
    try:
        total = dados_mes['Receitas'] + dados_mes['Despesas'] + dados_mes['Investimentos']
        if total == 0:
            return [0, 0, 0]
        percent_receitas = (dados_mes['Receitas'] / total) * 100
        percent_despesas = (dados_mes['Despesas'] / total) * 100
        percent_investimentos = (dados_mes['Investimentos'] / total) * 100
        return [percent_receitas, percent_despesas, percent_investimentos]
    except:
        return [0, 0, 0]

# Função para gerar o gráfico de pizza
def gerar_grafico_pizza(mes):
    dados_mes = st.session_state.dados_por_mes[mes]
    percentuais = calcular_percentuais(dados_mes)
    df_percent = pd.DataFrame({
        'Categoria': ['Receitas', 'Despesas', 'Investimentos'],
        'Percentual': percentuais
    })
    fig = px.pie(df_percent, values='Percentual', names='Categoria', title=f'Distribuição em {mes}')
    st.plotly_chart(fig)

# Função para gerar o gráfico anual de linha
def gerar_grafico_anual():
    resumo = {"Meses": [], "Receitas": [], "Despesas": []}
    for mes, dados in st.session_state.dados_por_mes.items():
        resumo['Meses'].append(mes)
        resumo['Receitas'].append(dados['Receitas'])
        resumo['Despesas'].append(dados['Despesas'])
    
    df_resumo = pd.DataFrame(resumo)
    fig = px.line(df_resumo, x='Meses', y=['Receitas', 'Despesas'], title="Evolução Anual de Receitas e Despesas")
    st.plotly_chart(fig)

# Página inicial com as caixas dos meses
st.title('Planejamento Financeiro - Meses do Ano')

# Exibir os meses em caixas de resumo sem edição
st.subheader('Resumo dos Meses')
col1, col2, col3 = st.columns(3)
meses = list(st.session_state.dados_por_mes.keys())

for i, mes in enumerate(meses):
    col = [col1, col2, col3][i % 3]  # Distribuir os meses entre as colunas
    with col:
        exibir_resumo_mes(mes, st.session_state.dados_por_mes[mes])

# Seção de Receita e Despesa (caixas)
st.subheader('Receitas por Mês')
col1, col2, col3 = st.columns(3)
for i, mes in enumerate(meses):
    col = [col1, col2, col3][i % 3]
    with col:
        st.write(f"{mes} - R$ {st.session_state.dados_por_mes[mes]['Receitas']:.2f}")

st.subheader('Despesas por Mês')
col1, col2, col3 = st.columns(3)
for i, mes in enumerate(meses):
    col = [col1, col2, col3][i % 3]
    with col:
        st.write(f"{mes} - R$ {st.session_state.dados_por_mes[mes]['Despesas']:.2f}")

# Gráfico de Pizza
st.subheader('Gráfico de Pizza (Selecione o Mês)')
mes_selecionado = st.selectbox("Selecione o mês", meses)
gerar_grafico_pizza(mes_selecionado)

# Gráfico Anual de Linha
st.subheader('Gráfico Anual de Linha')
gerar_grafico_anual()
