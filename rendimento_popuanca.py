# -*- coding: utf-8 -*-
"""Rendimento_popuanca.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_L0lESj96JFjVodp1rZotcO5HAcDN6pL
"""

import requests
import streamlit as st

# Função para obter a Taxa Selic atual usando a API do Banco Central
def obter_selic():
    url = 'https://api.bcb.gov.br/dados/serie/bcdata.sgs.432/dados?formato=json'
    response = requests.get(url)

    if response.status_code == 200:
        dados = response.json()
        ultima_data = dados[-1]['data']
        ultima_taxa = float(dados[-1]['valor'])
        print(f"Última Taxa Selic: {ultima_taxa}% (Data: {ultima_data})")
        return ultima_taxa
    else:
        print("Erro ao acessar a API do Banco Central.")
        return None

# Função para calcular o rendimento da poupança com base na Selic
def calcular_rendimento_poupanca(taxa_selic):
    # Se a Selic for menor ou igual a 8,5% ao ano
    if taxa_selic <= 8.5:
        rendimento_anual = 0.7 * taxa_selic
        rendimento_mensal = rendimento_anual / 12
        print(f"Rendimento da Poupança: {rendimento_anual:.2f}% ao ano ou {rendimento_mensal:.2f}% ao mês")
    # Se a Selic for maior que 8,5% ao ano
    else:
        rendimento_mensal = 0.5  # Fixo em 0,5% ao mês
        rendimento_anual = rendimento_mensal * 12
        print(f"Rendimento da Poupança: {rendimento_anual:.2f}% ao ano ou {rendimento_mensal:.2f}% ao mês")
    return rendimento_anual, rendimento_mensal
    # Calcular o rendimento baseado no valor inicial
    rendimento_mensal_valor = valor_inicial * (rendimento_mensal / 100)
    rendimento_anual_valor = valor_inicial * (rendimento_anual / 100)

    return rendimento_anual, rendimento_mensal, rendimento_mensal_valor, rendimento_anual_valor

# Função para mostrar os resultados no Streamlit
def mostrar_rendimento_poupanca():
    st.title("Simulação de Rendimento da Poupança com Base na Selic")

    # Entrada do valor inicial na poupança
    valor_inicial = st.number_input("Insira o valor inicial na poupança (R$)", min_value=0.0, step=100.0)

    # Obter a taxa Selic
    taxa_selic = obter_selic()

    if taxa_selic:
        st.write(f"Taxa Selic Atual: {taxa_selic}%")

        # Calcular o rendimento
        rendimento_anual, rendimento_mensal = calcular_rendimento_poupanca(taxa_selic) #Removed extra argument

        # Calcular o rendimento baseado no valor inicial
        rendimento_mensal_valor = valor_inicial * (rendimento_mensal / 100)
        rendimento_anual_valor = valor_inicial * (rendimento_anual / 100)
        # Mostrar os resultados
        st.write(f"Rendimento da Poupança: {rendimento_anual:.2f}% ao ano ou {rendimento_mensal:.2f}% ao mês")
        st.write(f"Rendimento Mensal: R$ {rendimento_mensal_valor:.2f}")
        st.write(f"Rendimento Anual: R$ {rendimento_anual_valor:.2f}")

# Função principal do app
def main():
    mostrar_rendimento_poupanca()

if __name__ == '__main__':
    main()